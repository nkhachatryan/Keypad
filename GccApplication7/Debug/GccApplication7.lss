
GccApplication7.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000012c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800100  00800100  000001a0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001a0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001d0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000038  00000000  00000000  0000020c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000073d  00000000  00000000  00000244  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006a6  00000000  00000000  00000981  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002a1  00000000  00000000  00001027  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000006c  00000000  00000000  000012c8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000371  00000000  00000000  00001334  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000e4  00000000  00000000  000016a5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000028  00000000  00000000  00001789  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 48 00 	jmp	0x90	; 0x90 <__vector_11>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a1 30       	cpi	r26, 0x01	; 1
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 76 00 	call	0xec	; 0xec <main>
  88:	0c 94 94 00 	jmp	0x128	; 0x128 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <__vector_11>:
#include <avr/io.h>
#include <avr/interrupt.h>

uint8_t T = 0;
ISR (TIMER1_COMPA_vect)
{
  90:	1f 92       	push	r1
  92:	0f 92       	push	r0
  94:	0f b6       	in	r0, 0x3f	; 63
  96:	0f 92       	push	r0
  98:	11 24       	eor	r1, r1
  9a:	8f 93       	push	r24
	T = 1;
  9c:	81 e0       	ldi	r24, 0x01	; 1
  9e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
}
  a2:	8f 91       	pop	r24
  a4:	0f 90       	pop	r0
  a6:	0f be       	out	0x3f, r0	; 63
  a8:	0f 90       	pop	r0
  aa:	1f 90       	pop	r1
  ac:	18 95       	reti

000000ae <opros_str_stolb>:

char opros_str_stolb(char N)
{
	if(N == 1)
  ae:	81 30       	cpi	r24, 0x01	; 1
  b0:	49 f4       	brne	.+18     	; 0xc4 <opros_str_stolb+0x16>
	{
		DDRB = 0xF0; 
  b2:	80 ef       	ldi	r24, 0xF0	; 240
  b4:	84 b9       	out	0x04, r24	; 4
		PORTB = 0x0F;
  b6:	8f e0       	ldi	r24, 0x0F	; 15
  b8:	85 b9       	out	0x05, r24	; 5
		if (PINB != 0x0F);
  ba:	83 b1       	in	r24, 0x03	; 3
		{
			return (~PINB) & 0x0F;;
  bc:	83 b1       	in	r24, 0x03	; 3
  be:	80 95       	com	r24
  c0:	8f 70       	andi	r24, 0x0F	; 15
  c2:	08 95       	ret
		}
	} else
	{
		DDRB = 0x0F;
  c4:	8f e0       	ldi	r24, 0x0F	; 15
  c6:	84 b9       	out	0x04, r24	; 4
		PORTB = 0xF0;
  c8:	80 ef       	ldi	r24, 0xF0	; 240
  ca:	85 b9       	out	0x05, r24	; 5
		if (PINB != 0xF0);
  cc:	83 b1       	in	r24, 0x03	; 3
		{
			return (~PINB) & 0xF0;;
  ce:	83 b1       	in	r24, 0x03	; 3
  d0:	80 95       	com	r24
  d2:	80 7f       	andi	r24, 0xF0	; 240
		}
	}
}
  d4:	08 95       	ret

000000d6 <opros>:

char opros()
{
  d6:	cf 93       	push	r28
	char Z;
	Z = opros_str_stolb(0);
  d8:	80 e0       	ldi	r24, 0x00	; 0
  da:	0e 94 57 00 	call	0xae	; 0xae <opros_str_stolb>
  de:	c8 2f       	mov	r28, r24
	Z << 4;
	Z |= opros_str_stolb(1);
  e0:	81 e0       	ldi	r24, 0x01	; 1
  e2:	0e 94 57 00 	call	0xae	; 0xae <opros_str_stolb>
	return Z;
}
  e6:	8c 2b       	or	r24, r28
  e8:	cf 91       	pop	r28
  ea:	08 95       	ret

000000ec <main>:
	}
}
*/
int main(void)
{
    TCCR1B |= (1<<WGM12); //reset by same
  ec:	e1 e8       	ldi	r30, 0x81	; 129
  ee:	f0 e0       	ldi	r31, 0x00	; 0
  f0:	80 81       	ld	r24, Z
  f2:	88 60       	ori	r24, 0x08	; 8
  f4:	80 83       	st	Z, r24
	TIMSK0 |= (1<<OCIE1A);
  f6:	ae e6       	ldi	r26, 0x6E	; 110
  f8:	b0 e0       	ldi	r27, 0x00	; 0
  fa:	8c 91       	ld	r24, X
  fc:	82 60       	ori	r24, 0x02	; 2
  fe:	8c 93       	st	X, r24
	OCR1AH = 0b00000011;
 100:	83 e0       	ldi	r24, 0x03	; 3
 102:	80 93 89 00 	sts	0x0089, r24	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
	OCR1AL = 0b11111111;
 106:	9f ef       	ldi	r25, 0xFF	; 255
 108:	90 93 88 00 	sts	0x0088, r25	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
	TCCR1B |= (1<<CS11);
 10c:	80 81       	ld	r24, Z
 10e:	82 60       	ori	r24, 0x02	; 2
 110:	80 83       	st	Z, r24
	DDRD = 0xFF;
 112:	9a b9       	out	0x0a, r25	; 10
	PORTD = 0x00;
 114:	1b b8       	out	0x0b, r1	; 11
	sei();
 116:	78 94       	sei
    while (1) 
    {
		T = 1;
		if(T)
		{
			T = 0;
 118:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
			E = opros();
 11c:	0e 94 6b 00 	call	0xd6	; 0xd6 <opros>
			if(E)
 120:	88 23       	and	r24, r24
 122:	d1 f3       	breq	.-12     	; 0x118 <main+0x2c>
			{
				PORTD = E;
 124:	8b b9       	out	0x0b, r24	; 11
 126:	f8 cf       	rjmp	.-16     	; 0x118 <main+0x2c>

00000128 <_exit>:
 128:	f8 94       	cli

0000012a <__stop_program>:
 12a:	ff cf       	rjmp	.-2      	; 0x12a <__stop_program>
